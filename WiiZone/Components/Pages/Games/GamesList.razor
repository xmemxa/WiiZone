@page "/games"
@inject NavigationManager nav
@inject IDbContextProvider DbContextProvider
@using Microsoft.EntityFrameworkCore
@using WiiZoneNowy.Data
@rendermode InteractiveServer

<div class="container mt-1">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Games</h2>
        <button class="btn btn-primary d-flex align-items-center"
                @onclick="@(() => nav.NavigateTo("/games/add"))">
            <i class="bi bi-plus-lg me-2"></i>
            Add Game
        </button>
    </div>
    
    <div class="mb-4 position-relative">
        <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ms-3 text-muted"></i>
        <input type="text"
               @bind="searchTerm"
               @bind:event="oninput"
               class="form-control ps-5"
               placeholder="Search by title or genre..." />
    </div>
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        @if (allGames == null)
        {
            <div class="col">
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status"></div>
                    <div class="mt-2 text-muted">Loading…</div>
                </div>
            </div>
        }
        else if (!FilteredGames.Any())
{
    <div class="col">
        <div class="text-center py-5 text-muted">No games found</div>
    </div>
}
else
{
   
    @foreach (var game in FilteredGames)
    {
        <div class="col-12 col-sm-6 col-md-4 col-lg-3">
            <div class="card h-100 shadow-sm border-0 card-hover">
                <div class="ratio ratio-4x3">
                    <img 
                        src="@game.CoverImage" 
                        alt="@game.Title" 
                        class="card-img-top object-fit-cover" />
                </div>

                <div class="card-body d-flex flex-column">
                    <h5 class="card-title text-truncate">@game.Title</h5>
                    
                    <div class="mb-2"> 
                        @foreach (var t in game.GameTags.Select(gt => gt.Tag.Name))
                        {
                         <span class="badge bg-secondary me-1">@t</span>
                        }
                    </div>
                    <p class="card-text text-muted mb-1">
                        @game.Genre&nbsp;&bull;&nbsp;@game.ReleaseYear
                    </p>
                    <p class="card-text mb-2">
                        <strong>Price:</strong> @game.Price.ToString("C")
                    </p>
                    <p class="card-text mb-2 text-muted">
                        <small>Rented @game.TimesRented times</small>
                    </p>
                    <span class="badge mb-3 @(game.IsReserved ? "bg-warning text-dark" : "bg-success")">
                        @(game.IsReserved ? "Reserved" : "Available")
                    </span>
                    <div class="mt-auto d-flex gap-2">
                        <button 
                            class="btn btn-sm btn-info flex-grow-1" 
                            @onclick="@(() => nav.NavigateTo($"/games/edit/{game.GameId}"))">
                            <i class="bi bi-pencil-fill me-1"></i> Edit
                        </button>
                        <button 
                            class="btn btn-sm btn-danger flex-grow-1" 
                            @onclick="@(() => DeleteGame(game.GameId))">
                            <i class="bi bi-trash-fill me-1"></i> Delete
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
}
</div>
</div>

@code {
    private List<Game> allGames = new();
    private string searchTerm = "";
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var db = DbContextProvider.GetDbContext();
        allGames = await db.Games
            .Include(g => g.GameTags)
            .ThenInclude(gt => gt.Tag)
            .Include(g => g.Reservations)
            .ToListAsync();
    }

    private IEnumerable<Game> FilteredGames =>
        string.IsNullOrWhiteSpace(searchTerm)
            ? allGames
            : allGames.Where(g =>
                g.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                g.Genre.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private async Task DeleteGame(int id)
    {
        var db = DbContextProvider.GetDbContext();
        var game = await db.Games
            .Include(g => g.Reservations)
            .FirstOrDefaultAsync(g => g.GameId == id);

        if (game is null)
            return;
        
        if (game.Reservations.Any(r => !r.IsReturned))
        {
            errorMessage = "Cannot delete a game that has active reservations.";
            return;
        }

        db.Games.Remove(game);
        await db.SaveChangesAsync();
        
        allGames = await db.Games
            .Include(g => g.GameTags).ThenInclude(gt => gt.Tag)
            .Include(g => g.Reservations)
            .ToListAsync();
        errorMessage = null;
        StateHasChanged();
    }
}
