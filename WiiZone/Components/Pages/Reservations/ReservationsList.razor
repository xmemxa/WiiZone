@page "/reservations"
@using Microsoft.EntityFrameworkCore
@using WiiZoneNowy.Data
@inject IDbContextProvider DbContextProvider
@inject NavigationManager nav
@rendermode InteractiveServer

<div class="container mt-1">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Reservations</h2>
        <button class="btn btn-primary d-flex align-items-center"
                @onclick="@(() => nav.NavigateTo("/reservations/add"))">
            <i class="bi bi-plus-circle me-1"></i>
            Add Reservation
        </button>
    </div>

    <div class="mb-4 position-relative">
        <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ms-3 text-muted"></i>
        <input type="text"
               class="form-control ps-5"
               placeholder="Search by client or game..."
               @bind="searchTerm" 
               @bind:event="oninput"/>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    
    <div class="btn-group mb-3">
        <button class="btn btn-sm @(filter == "all" ? "btn-info" : "btn-outline-secondary")"
                @onclick="@(() => SetFilter("all"))">
            All
        </button>
        <button class="btn btn-sm @(filter == "reservation" ? "btn-primary" : "btn-outline-secondary")"
                @onclick="@(() => SetFilter("reservation"))">
            Reservation
        </button>
        <button class="btn btn-sm @(filter == "overdue" ? "btn-danger" : "btn-outline-secondary")"
                @onclick="@(() => SetFilter("overdue"))">
            Overdue
        </button>
        <button class="btn btn-sm @(filter == "returned" ? "btn-success" : "btn-outline-secondary")"
                @onclick="@(() => SetFilter("returned"))">
            Returned
        </button>
    </div>

    <div class="card shadow-sm">
        <div class="table-responsive">
            <table class="table table-hover table-striped mb-0">
                <thead class="table-light">
                    <tr>
                        <th style="width: 5%;">ID</th>
                        <th style="width: 25%;">Game</th>
                        <th style="width: 25%;">Client</th>
                        <th style="width: 20%;">Dates</th>
                        <th style="width: 10%;">Status</th>
                        <th style="width: 15%;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (reservations == null)
                    {
                        <tr>
                            <td colspan="6" class="text-center py-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </td>
                        </tr>
                    }
                    else if (!FilteredReservations.Any())
                    {
                        <tr>
                            <td colspan="6" class="text-center py-4 text-muted">
                                No reservations found
                            </td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var r in FilteredReservations)
                        {
                            <tr>
                                <td class="align-middle">@r.ReservationId</td>
                                <td class="align-middle">@r.Game.Title</td>
                                <td class="align-middle">@r.Client.Name</td>
                                <td class="align-middle">
                                    <div>Start: @r.StartDate.ToString("yyyy-MM-dd")</div>
                                    <div>End:   @r.EndDate.ToString("yyyy-MM-dd")</div>
                                </td>
                                <td class="align-middle">
                                    <span class="@GetStatusClass(r)">
                                        @GetStatusText(r)
                                    </span>
                                </td>
                                <td class="align-middle">
                                    <div class="d-flex gap-2 justify-content-end">
                                        @if (!r.IsReturned)
                                        {
                                            <button class="btn btn-sm btn-success"
                                                    @onclick="() => OnReturn(r.ReservationId)">
                                                <i class="bi bi-arrow-return-left me-1"></i>
                                                Return
                                            </button>
                                        }
                                        <button class="btn btn-sm btn-primary"
                                                @onclick="@(() => nav.NavigateTo($"/reservations/edit/{r.ReservationId}"))">
                                            <i class="bi bi-pencil me-1"></i>
                                            Edit
                                        </button>
                                        <button class="btn btn-sm btn-danger flex-grow-1"
                                                @onclick="@(() => DeleteReservation(r.ReservationId))"
                                                title="Delete reservation">
                                            <i class="bi bi-pencil-fill me-1"></i>
                                            Delete
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private List<Reservation> reservations;
    private string searchTerm = string.Empty;
    private string filter = "all";
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var db = DbContextProvider.GetDbContext();
        reservations = await db.Reservations
                               .Include(r => r.Game)
                               .Include(r => r.Client)
                               .ToListAsync();
    }

    private IEnumerable<Reservation> FilteredReservations =>
        (reservations ?? new List<Reservation>())
            .Where(r =>
                (string.IsNullOrWhiteSpace(searchTerm)
                 || r.Game.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                 || r.Client.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                && (filter == "all"
                    || GetStatusText(r).Equals(filter, StringComparison.OrdinalIgnoreCase))
            );

    private void SetFilter(string value)
    {
        filter = value;
    }

    private string GetStatusText(Reservation r) =>
        r.IsReturned
            ? "Returned"
            : (r.EndDate < DateTime.Today ? "Overdue" : "Reservation");

    private string GetStatusClass(Reservation r) =>
        GetStatusText(r).ToLower() switch
        {
            "reservation" => "badge bg-primary text-white",
            "overdue"     => "badge bg-danger text-white",
            "returned"    => "badge bg-success text-white",
            _             => "badge bg-secondary"
        };
    
    private async Task DeleteReservation(int reservationId)
    {
        var db = DbContextProvider.GetDbContext();
        var reservation = await db.Reservations
            .Include(r => r.Game)
            .FirstOrDefaultAsync(r => r.ReservationId == reservationId);

        if (reservation == null)
            return;

        if (!reservation.IsReturned)
        {
            errorMessage = "You cannot delete a reservation that has not been returned.";
            return;
        }

        db.Reservations.Remove(reservation);
        await db.SaveChangesAsync();

        reservations = await db.Reservations
            .Include(r => r.Game)
            .Include(r => r.Client)
            .ToListAsync();

        errorMessage = null;
        StateHasChanged();
    }

    
    private async void OnReturn(int id)
    {
        var db = DbContextProvider.GetDbContext();
        var res = await db.Reservations
                          .Include(r => r.Game)
                          .FirstOrDefaultAsync(r => r.ReservationId == id);

        if (res != null && !res.IsReturned)
        {
            res.IsReturned = true;
            res.Game.IsReserved = false;
            await db.SaveChangesAsync();

            reservations = await db.Reservations
                                   .Include(r => r.Game)
                                   .Include(r => r.Client)
                                   .ToListAsync();
            StateHasChanged();
        }
    }
}
