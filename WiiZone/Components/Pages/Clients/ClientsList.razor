@page "/clients"
@using Microsoft.EntityFrameworkCore
@using WiiZoneNowy.Data
@inject IDbContextProvider DbContextProvider
@inject NavigationManager nav
@rendermode InteractiveServer

<div class="container mt-1">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Clients</h2>
        <button class="btn btn-primary" @onclick="@(() => nav.NavigateTo("/clients/add"))">
            <i class="bi bi-plus-lg me-1"></i>
            Add Client
        </button>
    </div>

    <div class="mb-4 position-relative">
        <i class="bi bi-search position-absolute top-50 start-0 translate-middle-y ms-3 text-muted"></i>
        <input type="text"
               @bind="searchTerm"
               @bind:event="oninput"
               class="form-control ps-5"
               placeholder="Search clients by name, email or phone number..."/>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle-fill me-1"></i>
            @errorMessage
        </div>
    }

    <div class="card shadow-sm">
        <div class="table-responsive">
            <table class="table table-hover table-striped mb-0">
                <thead class="table-light">
                <tr>
                    <th style="width: 5%;">ID</th>
                    <th style="width: 30%;">Client</th>
                    <th style="width: 25%;">Contact</th>
                    <th style="width: 10%;">Active</th>
                    <th style="width: 10%;">Total</th>
                    <th style="width: 20%;">Actions</th>
                </tr>
                </thead>
                <tbody>
                @if (clients == null)
                {
                    <tr>
                        <td colspan="6" class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading…</span>
                            </div>
                        </td>
                    </tr>
                }
                else if (!FilteredClients.Any())
                {
                    <tr>
                        <td colspan="6" class="text-center py-4 text-muted">
                            No clients found
                        </td>
                    </tr>
                }
                else
                {
                    @foreach (var client in FilteredClients)
                    {
                        <tr>
                            <td class="align-middle">@client.ClientId</td>
                            <td class="align-middle">
                                <div class="fw-bold">@client.Name</div>
                                <div class="text-muted small">@client.Email</div>
                            </td>
                            <td class="align-middle">@client.Phone</td>
                            <td class="align-middle">@client.Reservations.Count(r => !r.IsReturned)</td>
                            <td class="align-middle">@client.Reservations.Count</td>
                            <td class="align-middle">
                                <div class="d-flex gap-2 justify-content-end">
                                    <button class="btn btn-sm btn-info flex-grow-1"
                                            @onclick="@(() => nav.NavigateTo($"/clients/edit/{client.ClientId}"))">
                                        <i class="bi bi-pencil-fill me-1"></i> Edit
                                    </button>
                                    <button class="btn btn-sm btn-danger flex-grow-1"
                                            @onclick="@(() => DeleteClient(client.ClientId))"
                                            title="Delete client">
                                        <i class="bi bi-trash-fill me-1"></i> Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private string searchTerm = string.Empty;
    private List<Client> clients = new();
    private string? errorMessage;

    private IEnumerable<Client> FilteredClients => string.IsNullOrWhiteSpace(searchTerm)
        ? clients
        : clients.Where(c =>
            c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            c.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            c.Phone.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        var db = DbContextProvider.GetDbContext();
        clients = await db.Clients
            .Include(c => c.Reservations)
            .ToListAsync();
    }

    private async Task DeleteClient(int clientId)
    {
        var db = DbContextProvider.GetDbContext();
        var client = await db.Clients
            .Include(c => c.Reservations)
            .FirstOrDefaultAsync(c => c.ClientId == clientId);

        if (client is null)
            return;

        if (client.Reservations.Any(r => !r.IsReturned))
        {
            errorMessage = "Client has active reservations and cannot be deleted.";
            return;
        }

        db.Clients.Remove(client);
        await db.SaveChangesAsync();

        clients = await db.Clients
            .Include(c => c.Reservations)
            .ToListAsync();
        errorMessage = null;
        StateHasChanged();
    }

}
